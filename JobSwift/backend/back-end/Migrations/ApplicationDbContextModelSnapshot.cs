// <auto-generated />
<<<<<<< HEAD
using System;
=======
>>>>>>> 36c71e2e54349876c50dd31a9fe3b96670c57b6a
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using back_end.Context;

#nullable disable

namespace back_end.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Candidato", b =>
                {
                    b.Property<int>("IdCandidato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCandidato"), 1L, 1);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NTelefonico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCandidato");

                    b.ToTable("Candidato");

                    b.HasData(
                        new
                        {
                            IdCandidato = 1,
                            Apellidos = "Perez Lopez",
                            Ciudad = "Ciudad de México",
                            CodigoP = "12345",
                            Contrasena = "password123",
                            Email = "juan.perez@example.com",
                            NTelefonico = "1234567890",
                            NombreCompleto = "Juan Perez",
                            Token = "sometoken123"
                        });
                });
<<<<<<< HEAD

            modelBuilder.Entity("Domain.Entities.Favoritos", b =>
                {
                    b.Property<int>("IdFavoritos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFavoritos"), 1L, 1);

                    b.Property<int>("Fk_IdCandidato")
                        .HasColumnType("int");

                    b.Property<int>("Fk_IdOfertaTrabajo")
                        .HasColumnType("int");

                    b.HasKey("IdFavoritos");

                    b.HasIndex("Fk_IdCandidato");

                    b.HasIndex("Fk_IdOfertaTrabajo");

                    b.ToTable("Favoritos");

                    b.HasData(
                        new
                        {
                            IdFavoritos = 1,
                            Fk_IdCandidato = 1,
                            Fk_IdOfertaTrabajo = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.OfertaTrabajo", b =>
                {
                    b.Property<int>("IdOfertaTrabajo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOfertaTrabajo"), 1L, 1);

                    b.Property<string>("Contrato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experiencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha_publicacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fk_IdReclutador")
                        .HasColumnType("int");

                    b.Property<string>("Jornada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requerimientos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Urgente")
                        .HasColumnType("bit");

                    b.HasKey("IdOfertaTrabajo");

                    b.HasIndex("Fk_IdReclutador");

                    b.ToTable("OfertaTrabajo");

                    b.HasData(
                        new
                        {
                            IdOfertaTrabajo = 1,
                            Contrato = "Indefinido",
                            Descripcion = "Se busca desarrollador backend con experiencia en Node.js",
                            Experiencia = "Al menos 3 años en desarrollo backend",
                            Fecha_publicacion = new DateTime(2024, 6, 14, 18, 44, 21, 522, DateTimeKind.Utc).AddTicks(9868),
                            Fk_IdReclutador = 1,
                            Jornada = "Tiempo completo",
                            Requerimientos = "Conocimientos avanzados en Node.js y MongoDB",
                            Salario = "$3000 - $4000",
                            Titulo = "Desarrollador Backend",
                            Ubicacion = "Ciudad X",
                            Urgente = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.PerfilCandidato", b =>
                {
                    b.Property<int>("IdPerfilCandidato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerfilCandidato"), 1L, 1);

                    b.Property<string>("CurriculumPerfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experiencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fk_Candidato")
                        .HasColumnType("int");

                    b.Property<string>("Formacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotoCandidato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Habilidades")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idiomas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPerfilCandidato");

                    b.HasIndex("Fk_Candidato");

                    b.ToTable("PerfilCandidato");

                    b.HasData(
                        new
                        {
                            IdPerfilCandidato = 1,
                            CurriculumPerfil = "url_del_curriculum.pdf",
                            Experiencia = "5 años en desarrollo web",
                            Fk_Candidato = 1,
                            Formacion = "Licenciatura en Informática",
                            FotoCandidato = "url_de_la_foto.jpg",
                            Habilidades = "JavaScript, Node.js, MongoDB",
                            Idiomas = "Inglés avanzado, Español nativo"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Reclutador", b =>
                {
                    b.Property<int>("IdReclutador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReclutador"), 1L, 1);

                    b.Property<string>("ApellidosReclutador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreComercial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreReclutador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTelefonico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RFC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("constrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdReclutador");

                    b.ToTable("Reclutador");

                    b.HasData(
                        new
                        {
                            IdReclutador = 1,
                            ApellidosReclutador = "Rodriguez Lopez",
                            Ciudad = "Cancún",
                            CodigoPostal = "sometoken123",
                            Email = "Sebastian@example.com",
                            NombreComercial = "Nubefast",
                            NombreReclutador = "Jose Sebastian",
                            NumeroTelefonico = "9988351623",
                            RFC = "TII190214ABC",
                            RazonSocial = "Sistemas de la informacion",
                            Token = "sometoken1234",
                            constrasena = "password12345",
                            sector = "Tecnologia de la informacion(TI)"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Favoritos", b =>
                {
                    b.HasOne("Domain.Entities.Candidato", "Candidatos")
                        .WithMany()
                        .HasForeignKey("Fk_IdCandidato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OfertaTrabajo", "OfertaTrabajos")
                        .WithMany()
                        .HasForeignKey("Fk_IdOfertaTrabajo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidatos");

                    b.Navigation("OfertaTrabajos");
                });

            modelBuilder.Entity("Domain.Entities.OfertaTrabajo", b =>
                {
                    b.HasOne("Domain.Entities.Reclutador", "Reclutadores")
                        .WithMany()
                        .HasForeignKey("Fk_IdReclutador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reclutadores");
                });

            modelBuilder.Entity("Domain.Entities.PerfilCandidato", b =>
                {
                    b.HasOne("Domain.Entities.Candidato", "PCandidatos")
                        .WithMany()
                        .HasForeignKey("Fk_Candidato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PCandidatos");
                });
=======
>>>>>>> 36c71e2e54349876c50dd31a9fe3b96670c57b6a
#pragma warning restore 612, 618
        }
    }
}
